// ^ 匹配输入的开始。如果多行标志被设置为true，那么也匹配换行符后紧跟的位置
// 例如：/^banana/ 会匹配"banana"，但是不会匹配"a banana"
// 当 '^' 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。

// $ 匹配输入的结束。如果多行标志被设置为true，那么也匹配换行符前的位置
// 例如：/apple$/ 会匹配"an apple"，但是不会匹配"an apple tree"

// * 匹配前面一个表达式0次或多次。等价于{0,}。
// + 匹配前面一个表达式1次或多次。等价于{1,}。
// ? 匹配前面一个表达式0次或1次。等价于{0,1}。
// . 默认匹配除换行符之外的任何单个字符。
// (x) 它会匹配 x 并且记住匹配项。其中括号被称为捕获括号。
// (?:x) 它会匹配 x 但是不记住匹配项。这种括号叫做非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。
// x(?=y) 匹配 x 仅仅当 x 后面跟着 y 。这种叫做先行断言。
// (?<=y)x 匹配 x 仅当 x 前面是 y 。这种叫做后行断言。
// x(?!y) 仅仅当'x'后面不跟着'y'时匹配'x'，这被称为正向否定查找。
// (?<!y)x 仅仅当'x'前面不是'y'时匹配'x'，这被称为反向否定查找。
// x|y 匹配‘x’或者‘y’。
// {n} n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。
// {n,} n 是一个正整数，匹配前一个字符至少出现了 n 次。
// {n,m} n 和 m 都是整数。匹配前面的字符至少 n 次，最多 m 次。如果 n 或者 m 的值是 0，这个值被忽略
// [xyz] 一个字符集合。匹配方括号中的任意字符。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。[abcd] 和 [a-d] 是一样的。
// [^xyz] 一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。
// [\b] 匹配一个退格 (U+0008)。（不要和\b混淆了。
// \b 匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是 0。（不要和 [\b] 混淆了）
// \B 匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符、字符串最后一个字符为非“字”字符、两个单词字符之间、两个非单词字符之间、空字符串，例如，/\B../匹配"noonday"中的'oo', 而/y\B../匹配"possibly yesterday"中的’yes‘